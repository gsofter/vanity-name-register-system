/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VanityRegisterServiceInterface extends ethers.utils.Interface {
  functions: {
    "FRONTRUN_TIME()": FunctionFragment;
    "NAME_MAX_LENGTH()": FunctionFragment;
    "NAME_MIN_LENGTH()": FunctionFragment;
    "bytePrice()": FunctionFragment;
    "cumulFees()": FunctionFragment;
    "getNameHash(bytes)": FunctionFragment;
    "getNameOwner(bytes)": FunctionFragment;
    "getNamePrice(bytes)": FunctionFragment;
    "getPreRegisterHash(bytes)": FunctionFragment;
    "getRegisterPrice(bytes)": FunctionFragment;
    "isNameAvailable(bytes)": FunctionFragment;
    "lockNamePrice()": FunctionFragment;
    "lockTime()": FunctionFragment;
    "lockedBalances(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "preRegister(bytes32)": FunctionFragment;
    "preRegisters(bytes32)": FunctionFragment;
    "register(bytes)": FunctionFragment;
    "renew(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBytePrice(uint256)": FunctionFragment;
    "setLockNamePrice(uint256)": FunctionFragment;
    "setLockTime(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vanityNames(bytes32)": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "withdrawLockedBalance(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FRONTRUN_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NAME_MAX_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NAME_MIN_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bytePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "cumulFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNameHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNameOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNamePrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreRegisterHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisterPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNameAvailable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockNamePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preRegister",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRegisters",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "renew", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBytePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockNamePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vanityNames",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLockedBalance",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FRONTRUN_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NAME_MAX_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NAME_MIN_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bytePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cumulFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNameHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNameOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreRegisterHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockNamePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRegisters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBytePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockNamePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vanityNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLockedBalance",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VanityNameRegistered(bytes,address,uint256)": EventFragment;
    "VanityNameRenewed(bytes,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VanityNameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VanityNameRenewed"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type VanityNameRegisteredEvent = TypedEvent<
  [string, string, BigNumber] & {
    name: string;
    owner: string;
    timestamp: BigNumber;
  }
>;

export type VanityNameRenewedEvent = TypedEvent<
  [string, string, BigNumber] & {
    name: string;
    owner: string;
    timestamp: BigNumber;
  }
>;

export class VanityRegisterService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VanityRegisterServiceInterface;

  functions: {
    FRONTRUN_TIME(overrides?: CallOverrides): Promise<[number]>;

    "FRONTRUN_TIME()"(overrides?: CallOverrides): Promise<[number]>;

    NAME_MAX_LENGTH(overrides?: CallOverrides): Promise<[number]>;

    "NAME_MAX_LENGTH()"(overrides?: CallOverrides): Promise<[number]>;

    NAME_MIN_LENGTH(overrides?: CallOverrides): Promise<[number]>;

    "NAME_MIN_LENGTH()"(overrides?: CallOverrides): Promise<[number]>;

    bytePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bytePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cumulFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNameHash(_name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getNameHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNameOwner(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getNameOwner(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNamePrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNamePrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPreRegisterHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPreRegisterHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRegisterPrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRegisterPrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isNameAvailable(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isNameAvailable(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockNamePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockNamePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedBalances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
    >;

    "lockedBalances(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    preRegister(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "preRegister(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preRegisters(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "preRegisters(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    register(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "register(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renew(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renew(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBytePrice(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBytePrice(uint256)"(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockNamePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockNamePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockTime(uint256)"(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vanityNames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        expires: BigNumber;
        owner: string;
      }
    >;

    "vanityNames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        expires: BigNumber;
        owner: string;
      }
    >;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLockedBalance(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLockedBalance(bytes)"(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FRONTRUN_TIME(overrides?: CallOverrides): Promise<number>;

  "FRONTRUN_TIME()"(overrides?: CallOverrides): Promise<number>;

  NAME_MAX_LENGTH(overrides?: CallOverrides): Promise<number>;

  "NAME_MAX_LENGTH()"(overrides?: CallOverrides): Promise<number>;

  NAME_MIN_LENGTH(overrides?: CallOverrides): Promise<number>;

  "NAME_MIN_LENGTH()"(overrides?: CallOverrides): Promise<number>;

  bytePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "bytePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  cumulFees(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNameHash(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getNameHash(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNameOwner(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getNameOwner(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNamePrice(_name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "getNamePrice(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPreRegisterHash(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPreRegisterHash(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRegisterPrice(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRegisterPrice(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isNameAvailable(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isNameAvailable(bytes)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockNamePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "lockNamePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalances(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
  >;

  "lockedBalances(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  preRegister(
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "preRegister(bytes32)"(
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preRegisters(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "preRegisters(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  register(
    _name: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "register(bytes)"(
    _name: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renew(
    _name: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renew(bytes)"(
    _name: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBytePrice(
    _bytePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBytePrice(uint256)"(
    _bytePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockNamePrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockNamePrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockTime(
    _lockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockTime(uint256)"(
    _lockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vanityNames(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      name: string;
      expires: BigNumber;
      owner: string;
    }
  >;

  "vanityNames(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      name: string;
      expires: BigNumber;
      owner: string;
    }
  >;

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFees()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLockedBalance(
    _name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLockedBalance(bytes)"(
    _name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FRONTRUN_TIME(overrides?: CallOverrides): Promise<number>;

    "FRONTRUN_TIME()"(overrides?: CallOverrides): Promise<number>;

    NAME_MAX_LENGTH(overrides?: CallOverrides): Promise<number>;

    "NAME_MAX_LENGTH()"(overrides?: CallOverrides): Promise<number>;

    NAME_MIN_LENGTH(overrides?: CallOverrides): Promise<number>;

    "NAME_MIN_LENGTH()"(overrides?: CallOverrides): Promise<number>;

    bytePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "bytePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    cumulFees(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNameHash(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getNameHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNameOwner(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getNameOwner(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNamePrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNamePrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreRegisterHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPreRegisterHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRegisterPrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisterPrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNameAvailable(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isNameAvailable(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockNamePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lockNamePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
    >;

    "lockedBalances(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expires: BigNumber; lockedBalance: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    preRegister(_hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "preRegister(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preRegisters(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preRegisters(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    "register(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renew(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    "renew(bytes)"(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBytePrice(
      _bytePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBytePrice(uint256)"(
      _bytePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockNamePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockNamePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockTime(uint256)"(
      _lockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vanityNames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        expires: BigNumber;
        owner: string;
      }
    >;

    "vanityNames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        expires: BigNumber;
        owner: string;
      }
    >;

    withdrawFees(overrides?: CallOverrides): Promise<void>;

    "withdrawFees()"(overrides?: CallOverrides): Promise<void>;

    withdrawLockedBalance(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLockedBalance(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "VanityNameRegistered(bytes,address,uint256)"(
      name?: null,
      owner?: null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; owner: string; timestamp: BigNumber }
    >;

    VanityNameRegistered(
      name?: null,
      owner?: null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; owner: string; timestamp: BigNumber }
    >;

    "VanityNameRenewed(bytes,address,uint256)"(
      name?: null,
      owner?: null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; owner: string; timestamp: BigNumber }
    >;

    VanityNameRenewed(
      name?: null,
      owner?: null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; owner: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    FRONTRUN_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "FRONTRUN_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    NAME_MAX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME_MAX_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    NAME_MIN_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME_MIN_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    bytePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "bytePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    cumulFees(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNameHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNameHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNameOwner(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNameOwner(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNamePrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNamePrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreRegisterHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPreRegisterHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisterPrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisterPrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNameAvailable(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isNameAvailable(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockNamePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lockNamePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedBalances(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    preRegister(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "preRegister(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preRegisters(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preRegisters(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "register(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renew(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renew(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBytePrice(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBytePrice(uint256)"(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockNamePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockNamePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockTime(uint256)"(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vanityNames(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "vanityNames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLockedBalance(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLockedBalance(bytes)"(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FRONTRUN_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FRONTRUN_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME_MAX_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME_MAX_LENGTH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME_MIN_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME_MIN_LENGTH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bytePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cumulFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNameHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNameHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNameOwner(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNameOwner(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNamePrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNamePrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreRegisterHash(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPreRegisterHash(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisterPrice(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisterPrice(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNameAvailable(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isNameAvailable(bytes)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockNamePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockNamePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedBalances(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preRegister(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "preRegister(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preRegisters(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "preRegisters(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "register(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renew(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renew(bytes)"(
      _name: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBytePrice(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBytePrice(uint256)"(
      _bytePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockNamePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockNamePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockTime(uint256)"(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vanityNames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vanityNames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLockedBalance(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLockedBalance(bytes)"(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
